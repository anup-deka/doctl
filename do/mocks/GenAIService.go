// Code generated by MockGen. DO NOT EDIT.
// Source: genai.go
//
// Generated by this command:
//
//	mockgen -source genai.go -package=mocks GenAIService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockGenAIAgentService is a mock of GenAIAgentService interface.
type MockGenAIAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockGenAIAgentServiceMockRecorder
	isgomock struct{}
}

// MockGenAIAgentServiceMockRecorder is the mock recorder for MockGenAIAgentService.
type MockGenAIAgentServiceMockRecorder struct {
	mock *MockGenAIAgentService
}

// NewMockGenAIAgentService creates a new mock instance.
func NewMockGenAIAgentService(ctrl *gomock.Controller) *MockGenAIAgentService {
	mock := &MockGenAIAgentService{ctrl: ctrl}
	mock.recorder = &MockGenAIAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenAIAgentService) EXPECT() *MockGenAIAgentServiceMockRecorder {
	return m.recorder
}

// AddKnowledgeBaseDataSource mocks base method.
func (m *MockGenAIAgentService) AddKnowledgeBaseDataSource(knowledgeBaseID string, req *godo.AddDataSourceRequest) (*do.KnowledgeBaseDataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKnowledgeBaseDataSource", knowledgeBaseID, req)
	ret0, _ := ret[0].(*do.KnowledgeBaseDataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKnowledgeBaseDataSource indicates an expected call of AddKnowledgeBaseDataSource.
func (mr *MockGenAIAgentServiceMockRecorder) AddKnowledgeBaseDataSource(knowledgeBaseID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnowledgeBaseDataSource", reflect.TypeOf((*MockGenAIAgentService)(nil).AddKnowledgeBaseDataSource), knowledgeBaseID, req)
}

// AttachKnowledgebase mocks base method.
func (m *MockGenAIAgentService) AttachKnowledgebase(agentId, knowledgeBaseID string) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachKnowledgebase", agentId, knowledgeBaseID)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachKnowledgebase indicates an expected call of AttachKnowledgebase.
func (mr *MockGenAIAgentServiceMockRecorder) AttachKnowledgebase(agentId, knowledgeBaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachKnowledgebase", reflect.TypeOf((*MockGenAIAgentService)(nil).AttachKnowledgebase), agentId, knowledgeBaseID)
}

// CreateKnowledgeBase mocks base method.
func (m *MockGenAIAgentService) CreateKnowledgeBase(req *godo.KnowledgeBaseCreateRequest) (*do.KnowledgeBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBase", req)
	ret0, _ := ret[0].(*do.KnowledgeBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBase indicates an expected call of CreateKnowledgeBase.
func (mr *MockGenAIAgentServiceMockRecorder) CreateKnowledgeBase(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBase", reflect.TypeOf((*MockGenAIAgentService)(nil).CreateKnowledgeBase), req)
}

// DeleteKnowledgeBaseDataSource mocks base method.
func (m *MockGenAIAgentService) DeleteKnowledgeBaseDataSource(knowledgeBaseID, dataSourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseDataSource", knowledgeBaseID, dataSourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledgeBaseDataSource indicates an expected call of DeleteKnowledgeBaseDataSource.
func (mr *MockGenAIAgentServiceMockRecorder) DeleteKnowledgeBaseDataSource(knowledgeBaseID, dataSourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseDataSource", reflect.TypeOf((*MockGenAIAgentService)(nil).DeleteKnowledgeBaseDataSource), knowledgeBaseID, dataSourceID)
}

// DeleteKnowledgebase mocks base method.
func (m *MockGenAIAgentService) DeleteKnowledgebase(knowledgeBaseID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgebase", knowledgeBaseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledgebase indicates an expected call of DeleteKnowledgebase.
func (mr *MockGenAIAgentServiceMockRecorder) DeleteKnowledgebase(knowledgeBaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgebase", reflect.TypeOf((*MockGenAIAgentService)(nil).DeleteKnowledgebase), knowledgeBaseID)
}

// DetachKnowledgebase mocks base method.
func (m *MockGenAIAgentService) DetachKnowledgebase(agentId, knowledgeBaseID string) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachKnowledgebase", agentId, knowledgeBaseID)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachKnowledgebase indicates an expected call of DetachKnowledgebase.
func (mr *MockGenAIAgentServiceMockRecorder) DetachKnowledgebase(agentId, knowledgeBaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachKnowledgebase", reflect.TypeOf((*MockGenAIAgentService)(nil).DetachKnowledgebase), agentId, knowledgeBaseID)
}

// GetKnowledgeBase mocks base method.
func (m *MockGenAIAgentService) GetKnowledgeBase(knowledgeBaseID string) (*do.KnowledgeBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBase", knowledgeBaseID)
	ret0, _ := ret[0].(*do.KnowledgeBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBase indicates an expected call of GetKnowledgeBase.
func (mr *MockGenAIAgentServiceMockRecorder) GetKnowledgeBase(knowledgeBaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBase", reflect.TypeOf((*MockGenAIAgentService)(nil).GetKnowledgeBase), knowledgeBaseID)
}

// ListKnowledgeBaseDataSources mocks base method.
func (m *MockGenAIAgentService) ListKnowledgeBaseDataSources(knowledgeBaseID string) (do.KnowledgeBaseDataSources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBaseDataSources", knowledgeBaseID)
	ret0, _ := ret[0].(do.KnowledgeBaseDataSources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBaseDataSources indicates an expected call of ListKnowledgeBaseDataSources.
func (mr *MockGenAIAgentServiceMockRecorder) ListKnowledgeBaseDataSources(knowledgeBaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBaseDataSources", reflect.TypeOf((*MockGenAIAgentService)(nil).ListKnowledgeBaseDataSources), knowledgeBaseID)
}

// ListKnowledgeBases mocks base method.
func (m *MockGenAIAgentService) ListKnowledgeBases() (do.KnowledgeBases, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBases")
	ret0, _ := ret[0].(do.KnowledgeBases)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBases indicates an expected call of ListKnowledgeBases.
func (mr *MockGenAIAgentServiceMockRecorder) ListKnowledgeBases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBases", reflect.TypeOf((*MockGenAIAgentService)(nil).ListKnowledgeBases))
}

// UpdateKnowledgebase mocks base method.
func (m *MockGenAIAgentService) UpdateKnowledgebase(knowledgeBaseID string, req *godo.UpdateKnowledgeBaseRequest) (*do.KnowledgeBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgebase", knowledgeBaseID, req)
	ret0, _ := ret[0].(*do.KnowledgeBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgebase indicates an expected call of UpdateKnowledgebase.
func (mr *MockGenAIAgentServiceMockRecorder) UpdateKnowledgebase(knowledgeBaseID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgebase", reflect.TypeOf((*MockGenAIAgentService)(nil).UpdateKnowledgebase), knowledgeBaseID, req)
}
